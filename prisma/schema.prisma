// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// --- User & Contract Models ---

model User {
  id                      Int                        @id @default(autoincrement())
  userId                  String                     @unique @map("user_id")
  email                   String?
  fullName                String?                    @map("full_name")
  phone                   String?
  age                     Int?
  nationality             String?
  createdAt               DateTime                   @default(now()) @map("created_at")
  updatedAt               DateTime                   @updatedAt @map("updated_at")

  // Relationships
  scholarshipApplications ScholarshipApplication[]
  documents               Document[]
  serviceContract         ServiceContract?

  @@map("users")
}

model ServiceContract {
  id                  Int                   @id @default(autoincrement())
  userId              String                @unique @map("user_id")
  status              ServiceContractStatus @default(NOT_SIGNED)
  contractVersion     String                @default("1.0") @map("contract_version")
  signedAt            DateTime?             @map("signed_at")
  contractDocumentUrl String?               @map("contract_document_url")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [userId])

  @@map("service_contracts")
}


// --- Scholarship & Application Models ---

model Scholarship {
  id                   Int                              @id @default(autoincrement())
  title                String
  description          String
  programType          String                           @map("program_type")
  major                String
  city                 String
  university           String
  languageProgram      Boolean                          @default(false) @map("language_program")
  hskRequired          Int?                             @map("hsk_required")
  ieltsRequired        Float?                           @map("ielts_required")
  minAge               Int?                             @map("min_age")
  maxAge               Int?                             @map("max_age")
  scholarshipAmount    Float?                           @map("scholarship_amount")
  applicationDeadline  DateTime?                        @map("application_deadline")
  isActive             Boolean                          @default(true) @map("is_active")
  createdAt            DateTime                         @default(now()) @map("created_at")
  updatedAt            DateTime                         @updatedAt @map("updated_at")

  // Relationships
  documentRequirements ScholarshipDocumentRequirement[]
  applications         ScholarshipApplication[]

  @@map("scholarships")
}

model ScholarshipDocumentRequirement {
  id            Int          @id @default(autoincrement())
  scholarshipId Int          @map("scholarship_id")
  documentType  DocumentType @map("document_type")
  notes         String?

  // Relationships
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id])

  @@unique([scholarshipId, documentType])
  @@map("scholarship_document_requirements")
}

model ScholarshipApplication {
  id                     Int               @id @default(autoincrement())
  userId                 String            @map("user_id")
  scholarshipId          Int?              @map("scholarship_id") // Nullable for regular college apps
  applicationId          String            @unique @map("application_id")
  status                 ApplicationStatus @default(DRAFT)
  collegeAdmissionStatus AdmissionStatus   @default(PENDING) @map("college_admission_status")
  hskLevel               Int?              @map("hsk_level")
  ieltsScore             Float?            @map("ielts_score")
  previousEducation      String?           @map("previous_education")
  motivationLetter       String?           @map("motivation_letter")
  admissionOfficerNotes  String?           @map("admission_officer_notes")
  contractSigned         Boolean           @default(false) @map("contract_signed")
  contractDate           DateTime?         @map("contract_date")
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @updatedAt @map("updated_at")

  // Relationships
  user        User         @relation(fields: [userId], references: [userId])
  scholarship Scholarship? @relation(fields: [scholarshipId], references: [id])
  documents   Document[]

  @@map("scholarship_applications")
}


// --- Document Model ---

model Document {
  id            Int            @id @default(autoincrement())
  userId        String         @map("user_id")
  applicationId Int?           @map("application_id")
  documentType  DocumentType   @map("document_type")
  fileName      String         @map("file_name")
  fileUrl       String         @map("file_url")
  fileSize      Int            @map("file_size")
  status        DocumentStatus @default(PENDING)
  uploadedBy    String         @map("uploaded_by")
  reviewNotes   String?        @map("review_notes")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  // Relationships
  user        User                   @relation(fields: [userId], references: [userId])
  application ScholarshipApplication? @relation(fields: [applicationId], references: [id])

  @@map("documents")
}


// --- Enums ---

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  CONTRACT_SENT
  CONTRACT_SIGNED
  ENROLLED
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  PASSPORT
  NATIONAL_ID
  HIGH_SCHOOL_CERTIFICATE
  MARRIAGE_CERTIFICATE
  ACCEPTANCE_LETTER
  HSK_CERTIFICATE
  IELTS_CERTIFICATE
  SIGNED_CONTRACT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  REVISION_NEEDED
}

enum ServiceContractStatus {
  NOT_SIGNED
  SENT
  SIGNED
  TERMINATED
}