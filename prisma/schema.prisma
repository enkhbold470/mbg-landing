// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SiteConfig {
  id          String @id @default(cuid())
  name        String
  description String
  tagline     String
  slogan      String
  url         String
  ogImage     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("site_config")
}

model Course {
  id          String @id @default(cuid())
  title       String
  subtitle    String
  description String
  price       String
  duration    String
  highlighted Boolean @default(false)
  slug        String @unique
  image       String
  video       String
  signupForm  String
  fullTitle   String
  startDate   String
  schedule    String
  frequency   String
  classSize   String
  teacher     String
  features    String[] // Array of features
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("courses")
}

model Testimonial {
  id        String @id @default(cuid())
  name      String
  role      String
  content   String
  rating    Int
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("testimonials")
}

model Partner {
  id        String @id @default(cuid())
  name      String
  logo      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("partners")
}

model FAQ {
  id        String @id @default(cuid())
  question  String
  answer    String
  order     Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("faq")
}

model Feature {
  id          String @id @default(cuid())
  title       String
  description String
  icon        String
  order       Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("features")
}

model Admin {
  id          String @id @default(cuid())
  username    String @unique
  password    String // Will store hashed password
  email       String @unique
  role        AdminRole @default(ADMIN)
  isActive    Boolean @default(true)
  lastLoginAt DateTime?
  lastLoginIp String?
  lastLoginDevice String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  auditLogs   AuditLog[]
  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
}

model AuditLog {
  id          String @id @default(cuid())
  adminId     String
  admin       Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)
  action      String // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  entityType  String // Course, Testimonial, Partner, FAQ, Feature, SiteConfig
  entityId    String?
  entityTitle String? // For display purposes
  changes     Json? // Store the actual changes
  ipAddress   String
  userAgent   String
  device      String? // Mobile, Desktop, Tablet
  browser     String?
  os          String?
  createdAt   DateTime @default(now())
  @@map("audit_logs")
  @@index([adminId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
}
